from tfpcbpggsz.Includes.selections import *
from tfpcbpggsz.Includes.ntuples import *
from tfpcbpggsz.Includes.variables import *
from tfpcbpggsz.Includes.common_constants import *
from tfpcbpggsz.Includes.VARDICT import VARDICT
import json
import os
from scipy.stats import poisson
import pandas as pd
import numpy as np
import uproot
import tensorflow as tf

from tfpcbpggsz.masspdfs import MassPDF

class MagPol:
    def __init__(self, name, list_magpol=None):
        self.name = name
        self.list_magpol = list_magpol

MagDown = MagPol("MagDown")
MagDown.list_magpol = [MagDown]
MagUp   = MagPol("MagUp" )
MagUp.list_magpol = [MagUp]
MagAll  = MagPol("MagAll", [MagUp, MagDown])
DICT_MAGPOL = {
    "MagDown": MagDown,
    "MagUp"  : MagUp,
    "MagAll" : MagAll
}
    
TREE_NAMES = { # const channel_dictionary 
    "CALLEVENTSTUPLE" :               "AllEventsTuple/EventTuple" ,        
    "CB2DPI_D2KSPIPI_DD" :            "B2DPi_D2KsPiPi_DD/DecayTree" ,     
    "CB2DK_D2KSPIPI_DD" :             "B2DK_D2KsPiPi_DD/DecayTree" ,      
    "CB2DPI_D2KSPIPI_LL" :            "B2DPi_D2KsPiPi_LL/DecayTree" ,     
    "CB2DK_D2KSPIPI_LL" :             "B2DK_D2KsPiPi_LL/DecayTree" ,      
    "CB2DPI_D2KSPIPI_LL_WS" :         "B2DPi_D2KsPiPi_LL_WS/DecayTree" ,  
    "CB2DK_D2KSPIPI_LL_WS" :          "B2DK_D2KsPiPi_LL_WS/DecayTree" ,   
    "CB2DK_D2KSPIPI_DD_WS" :          "B2DK_D2KsPiPi_DD_WS/DecayTree" ,   
    "CB2DPI_D2KSPIPI_DD_WS" :         "B2DPi_D2KsPiPi_DD_WS/DecayTree" ,  
    "CB2DPI_D2KSKK_DD_WS" :           "B2DPi_D2KsKK_DD_WS/DecayTree" ,    
    "CB2DK_D2KSKK_DD_WS" :            "B2DK_D2KsKK_DD_WS/DecayTree" ,     
    "CB2DPI_D2KSKK_LL" :              "B2DPi_D2KsKK_LL/DecayTree" ,	      
    "CB2DK_D2KSKK_LL" :               "B2DK_D2KsKK_LL/DecayTree" ,	      
    "CB2DPI_D2KSKK_LL_WS" :           "B2DPi_D2KsKK_LL_WS/DecayTree" ,    
    "CB2DK_D2KSKK_LL_WS" :            "B2DK_D2KsKK_LL_WS/DecayTree" ,     
    "CB2DPI_D2KSKK_DD" :              "B2DPi_D2KsKK_DD/DecayTree" ,	      
    "CB2DK_D2KSKK_DD" :               "B2DK_D2KsKK_DD/DecayTree" ,        
}

class Source:
    def __init__(self, name, isMC, tex, color):
        self.name = name
        self.isMC = isMC
        self.tex  = tex
        self._path = None
        self.color = color

#### SOURCES
SDATA = Source("SDATA", False,"LHCb Data", "black")
MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow  = Source("MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow" , True,r"MC $B^{\pm} \rightarrow [K_S\pi^+\pi^-]_D K^{\pm}$", "teal")
MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow = Source("MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow", True,r"MC $B^{\pm} \rightarrow [K_S\pi^+\pi^-]_D \pi^{\pm}$", "deeppink")
MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow    = Source("MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow"   , True,r"MC $B^{\pm} \rightarrow [K_SK^+K^-]_D K^{\pm}$", "limegreen")
MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow   = Source("MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow"  , True,r"MC $B^{\pm} \rightarrow [K_SK^+K^-]_D \pi^{\pm}$", "mediumorchid")
DICT_SOURCES = {
    "SDATA": SDATA,
    "MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow"  : MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow ,
    "MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow" : MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow,
    "MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow"    : MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow   ,
    "MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow"   : MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow  ,
}
DICT_CHANNELS_TO_SOURCES = {
    "CB2DK_D2KSPIPI_DD" : "MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow" ,
    "CB2DPI_D2KSPIPI_DD": "MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow",
    "CB2DK_D2KSPIPI_LL" : "MC_Bu_D0K_KSpipi_TightCut_LooserCuts_fixArrow" ,
    "CB2DPI_D2KSPIPI_LL": "MC_Bu_D0pi_KSpipi_TightCut_LooserCuts_fixArrow",
    "CB2DK_D2KSKK_DD"   : "MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow"   ,
    "CB2DPI_D2KSKK_DD"  : "MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow"  ,
    "CB2DK_D2KSKK_LL"   : "MC_Bu_D0K_KSKK_TightCut_LooserCuts_fixArrow"   ,
    "CB2DPI_D2KSKK_LL"  : "MC_Bu_D0pi_KSKK_TightCut_LooserCuts_fixArrow"  ,
}

class Channel:
    def __init__(self, name, tex, bach, Ddecay,KsTrack):
        self.name = name
        self.tree_name = TREE_NAMES[name]
        self._PROBNN_BACH_CUTS = None
        self._PROBNN_D_CHILDREN_CUTS = None
        self.preliminary_cuts = None
        self.final_cuts = None
        self.tex = tex
        self.bach = bach
        self.Ddecay = Ddecay
        self.KsTrack = KsTrack
        # self.Bach_ProbNN_cuts = None
    def get_preliminary_cuts(self, _year): # TCut 
        res = {}
        ## trigger
        res["Trigger"] = MAP_TRIGGER[_year]
        self.preliminary_cuts = res["Trigger"]
        ## cleaning
        res["DTF_Status"] = CUT_CLEANING_DATA
        self.preliminary_cuts += " & " + res["DTF_Status"]
        ## ProbNN D CHILDREN
        res["ProbNN_D_CHILDREN"] = MAP_PROBNN_DCHILDREN[_year][self.name]
        self.preliminary_cuts += " & " + res["ProbNN_D_CHILDREN"]
        # ## ProbNN Bach
        # res["ProbNN_Bach"] = MAP_PROBNN_BACH[_year][self.name]
        # self.preliminary_cuts += " & " + res["ProbNN_Bach"]
        ## DTF cuts
        res["DTF_Masses"] = MAP_DTF_CUTS[self.name]
        self.preliminary_cuts += " & " + res["DTF_Masses"]
        ## ENDVERTEX  ## encorporated into kinematics 02/09/2024
        # res["EndVertex_BDZSIG"] = CUTS_ENDVERTEX
        # self.preliminary_cuts += " & " + res["EndVertex_BDZSIG"]
        ## KINEMATICS
        res["Kinematics"] = MAP_KINEMATIC_CUTS[self.name]
        self.preliminary_cuts += " & " + res["Kinematics"]
        ## Lepton_veto
        res["Bach_PID"] = MAP_LEPTON_VETO[self.name]
        self.preliminary_cuts += " & " + res["Bach_PID"]
        ## Bachelor PID
        res["Lepton_veto"] = MAP_BACH_PID_PRELIM[self.name]
        self.preliminary_cuts += " & " + res["Lepton_veto"]
        self.dict_preliminary_cuts = res
        return self.preliminary_cuts
    def get_final_cuts(self, _year): # TCut 
        res = {}
        ## is_in_D_PhaseSpace
        res["is_in_D_PhaseSpace"] = "(is_in_D_PhaseSpace == True)"
        self.final_cuts = res["is_in_D_PhaseSpace"]
        res["Bach_PID"] = MAP_BACH_PID_FINAL[self.name]
        self.final_cuts += " & " + res["Bach_PID"]
        self.dict_final_cuts = res
        return self.final_cuts
    # def get_Bach_ProbNN_cuts(self, _year): # TCut 
    #     ## ProbNN Bach
    #     self.Bach_ProbNN_cuts = MAP_PROBNN_BACH[_year][self.name]
    #     return self.Bach_ProbNN_cuts


### CHANNELS
CB2DK_D2KSPIPI_DD  = Channel("CB2DK_D2KSPIPI_DD" ,r"$[K_S|_{DD}\pi^+\pi^-]_{D} K$"  ,"K","Kspipi", "DD")
CB2DPI_D2KSPIPI_DD = Channel("CB2DPI_D2KSPIPI_DD",r"$[K_S|_{DD}\pi^+\pi^-]_{D} \pi$","pi","Kspipi", "DD")
CB2DK_D2KSPIPI_LL  = Channel("CB2DK_D2KSPIPI_LL" ,r"$[K_S|_{LL}\pi^+\pi^-]_{D} K$"  ,"K","Kspipi", "LL")
CB2DPI_D2KSPIPI_LL = Channel("CB2DPI_D2KSPIPI_LL",r"$[K_S|_{LL}\pi^+\pi^-]_{D} \pi$","pi","Kspipi", "LL")
CB2DK_D2KSKK_DD    = Channel("CB2DK_D2KSKK_DD" ,r"$[K_S|_{DD}K^+K^-]_{D} K$"  ,"K","KsKK", "DD")
CB2DPI_D2KSKK_DD   = Channel("CB2DPI_D2KSKK_DD",r"$[K_S|_{DD}K^+K^-]_{D} \pi$","pi","KsKK", "DD")
CB2DK_D2KSKK_LL    = Channel("CB2DK_D2KSKK_LL" ,r"$[K_S|_{LL}K^+K^-]_{D} K$"  ,"K","KsKK", "LL")
CB2DPI_D2KSKK_LL   = Channel("CB2DPI_D2KSKK_LL",r"$[K_S|_{LL}K^+K^-]_{D} \pi$","pi","KsKK", "LL")
DICT_CHANNELS = {
    "CB2DK_D2KSPIPI_DD" : CB2DK_D2KSPIPI_DD ,
    "CB2DPI_D2KSPIPI_DD": CB2DPI_D2KSPIPI_DD,
    "CB2DK_D2KSPIPI_LL" : CB2DK_D2KSPIPI_LL ,
    "CB2DPI_D2KSPIPI_LL": CB2DPI_D2KSPIPI_LL,
    "CB2DK_D2KSKK_DD"   : CB2DK_D2KSKK_DD   ,
    "CB2DPI_D2KSKK_DD"  : CB2DPI_D2KSKK_DD  ,
    "CB2DK_D2KSKK_LL"   : CB2DK_D2KSKK_LL   ,
    "CB2DPI_D2KSKK_LL"  : CB2DPI_D2KSKK_LL  ,
}


class Year:
    def __init__(self, name, tex, run_name, luminosity=-1):
        self.name = name
        self.tex  = tex
        self._trigger_cuts = None
        self.list_years = None
        self.run_name = run_name
        self.luminosity = luminosity
    def __str__(self):
        return self.name

Y2011 = Year("Y2011", "2011","YRUN1", 1.0)
Y2011.list_years = [Y2011]
Y2012 = Year("Y2012", "2012","YRUN1", 2.0)
Y2012.list_years = [Y2012]
Y2015 = Year("Y2015", "2015","YRUN2", 0.30)
Y2015.list_years = [Y2015]
Y2016 = Year("Y2016", "2016","YRUN2", 1.6)
Y2016.list_years = [Y2016]
Y2017 = Year("Y2017", "2017","YRUN2", 1.7)
Y2017.list_years = [Y2017]
Y2018 = Year("Y2018", "2018","YRUN2", 2.1)
Y2018.list_years = [Y2018]
###RUN1
YRUN1 = Year("YRUN1", "Run 1", "YRUN1")
YRUN1.list_years = [Y2011, Y2012]
###RUN2
YRUN2 = Year("YRUN2", "Run 2", "YRUN2")
YRUN2.list_years = [Y2015, Y2016, Y2017, Y2018]
###YALL
YALL  = Year("YALL", "Run 1&2", "YALL")
YALL.list_years  = [Y2011, Y2012, Y2015, Y2016, Y2017, Y2018]
### 
DICT_YEARS = {
    "Y2011" : Y2011,
    "Y2012" : Y2012,
    "Y2015" : Y2015,
    "Y2016" : Y2016,
    "Y2017" : Y2017,
    "Y2018" : Y2018,
    "YRUN1" : YRUN1,
    "YRUN2" : YRUN2,
    "YALL"  : YALL ,
}

## getting the correct ntuple for a given source and a given channel year and magnet
def get_ntuple(_source, _channel, _year, _magpol, selec = "before_selection"):
    res = []
    tree_name = _channel.tree_name
    if (selec == "before_selection"):
        ## Which TTree do you need: 
        data_dict = SOURCE_LOCATIONS[_source.name]
        for year_item in _year.list_years:
            for magpol_item in _magpol.list_magpol:
                try:
                    paths = data_dict[year_item.name][magpol_item.name]
                    # print(paths)
                    for _path in paths:
                        res.append(_path+":"+tree_name)
                        # print("path:", _path)
                        pass # loop paths
                except KeyError:
                    print(" WARNING ================================ ntuples before selection")
                    print("No ntuples for ",_source.name,_channel.name,year_item.name,magpol_item.name)
                    pass # try except
                pass # loop mag
            pass # loop years
        return res
    elif (selec == "preliminary_cuts") :
        analysis_step = "00_Preliminary_cuts"
    elif (selec == "BDT_training"):
        analysis_step = "01_Prepare_training_datasets"
    elif (selec == "With_BDT"):
        analysis_step = "04_Apply_BDT"
    elif (selec == "final_cuts"):
        analysis_step = "05_Final_cuts"
    else:
        print(" ERROR ================================")
        print(" problem in ntuples.py --- check")
        return ""
    for year_item in _year.list_years:
        for magpol_item in _magpol.list_magpol:
            _path = pathname_storage+analysis_step+"/"+_channel.name+"/"+_source.name+"/"+year_item.name+"/"+magpol_item.name+"/outfile.root"
            if (os.path.isfile(_path)) :
                res.append(_path+":"+tree_name)
            else:
                print(" WARNING ================================ ntuples Pre-c or BDT")
                print("No ntuples for ",_source.name,_channel.name,year_item.name,magpol_item.name)
                print(_path)
            pass # loop mag
        pass # loop years
    return res

class Ntuple:
    def __init__(self, source, channel, year, magpol):
        if (type(source) == str):
            self.source = DICT_SOURCES[source]
            pass
        else:
            self.source = source
            pass
        if (type(channel) == str):
            self.channel = DICT_CHANNELS[channel]
            pass
        else:
            self.channel = channel
            pass
        if (type(year) == str):
            self.year = DICT_YEARS[year]
            pass
        else :
            self.year = year
            pass
        if (type(magpol) == str):
            self.magpol = DICT_MAGPOL[magpol]
            pass
        else :
            self.magpol = magpol
            pass
        self.original_paths = get_ntuple(self.source, self.channel, self.year, self.magpol, selec = "before_selection")
        self.preliminary_cuts_paths = get_ntuple(self.source, self.channel, self.year, self.magpol, selec = "preliminary_cuts")
        self.final_cuts_paths = get_ntuple(self.source, self.channel, self.year, self.magpol, selec = "final_cuts")
        # self.folder_path = self.channel.name +"/"+ self.source.name+"/"+self.year.name+"/"+self.magpol.name+"/"
        self._trigger_cuts = self.year._trigger_cuts
        self.preliminary_cuts = self.channel.get_preliminary_cuts(self.year.run_name)
        self.dict_preliminary_cuts = self.channel.dict_preliminary_cuts
        self.preliminary_cuts_eff  = self.get_preliminary_cuts_eff()
        self.final_cuts = self.channel.get_final_cuts(self.year.run_name)
        self.dict_final_cuts = self.channel.dict_final_cuts
        self.final_cuts_eff  = self.get_final_cuts_eff()
        # self.Bach_ProbNN_cuts = self.channel.get_Bach_ProbNN_cuts(self.year.run_name)
        self.variables = list(VARIABLES[self.year.run_name].keys())
        if (self.source.isMC) :
            self.variables = self.variables + list(TRUTH_VARIABLES[self.year.run_name].keys())
            pass
        self.new_variables = list(NEW_VARIABLES[self.year.run_name].keys())
        if (self.source.isMC) :
            self.new_variables = self.new_variables + list(NEW_TRUTH_VARIABLES[self.year.run_name].keys())
            pass
        self.tex = self.year.tex + " " + self.source.tex + " selected " + self.channel.tex
        self.BDT_training_paths = get_ntuple(self.source, self.channel, self.year, self.magpol, selec = "BDT_training")
        self.With_BDT_paths = get_ntuple(self.source, self.channel, self.year, self.magpol, selec = "With_BDT")
        self.truth_matching_cuts = self.get_truth_matching_cuts()

        ##### invariant mass fit objects
        self.components = COMPONENTS[self.source.name][self.channel.name]
        self.define_mass_pdfs()
        self.variable_to_fit = VARIABLE_TO_FIT[self.channel.name]        
        pass
    
    def __str__(self):
        pattern = '''
        Source         : {}\n
        Channel        : {}\n
        Year           : {}\n
        MagPol         : {}\n
        Paths OG       : {}\n
        Paths Pre-c    : {}\n
        Paths BDT      : {}\n
        Paths post-BDT : {}\n
        Paths Fin-c    : {}\n
        '''
        return pattern.format(self.source.name, self.channel.name, self.year.name, self.magpol.name, self.original_paths, self.preliminary_cuts_paths, self.BDT_training_paths, self.With_BDT_paths, self.final_cuts_paths)
    
    def get_preliminary_cuts_eff(self):
        res = {}
        for year_item in self.year.list_years:
            res[year_item.name] = {}
            for magpol_item in self.magpol.list_magpol:
                try:
                    path = pathname_local+'python/Includes/efficiency/'+self.channel.name+"/"+self.source.name+"/"+year_item.name+"/"+magpol_item.name+'/preliminary_cuts_info.json'
                    with open(path) as f:
                        print(" ================= GET PRELIMINARY CUTS EFFICIENCY INFO AT")
                        print(path)
                        res[year_item.name][magpol_item.name] = json.load(f)
                except FileNotFoundError:
                    print("Preliminary cuts efficiency not computed for this ntuple")
                    res[year_item.name][magpol_item.name] = None
                    pass
                pass
            pass
        return res

    def get_merged_preliminary_cuts_eff(self):
        ### this should be ran only when we have
        # ran the preliminary selections for all samples
        res = self.preliminary_cuts_eff
        num_lumi   = 0
        denom_lumi = 0
        for year_item in self.year.list_years:
            try:
                ### necessary since some MC don't have samples for
                # certain years
                test = res[year_item.name]
            except KeyError:
                continue
            num_magpol   = 0
            denom_magpol = 0
            for magpol_item in self.magpol.list_magpol:
                ### weighted average on magpol
                num_magpol += res[year_item.name][magpol_item.name]["input_events"] * res[year_item.name][magpol_item.name]["efficiency"]
                denom_magpol += res[year_item.name][magpol_item.name]["input_events"]
                pass
            num_lumi   += year_item.luminosity * num_magpol / denom_magpol
            denom_lumi += year_item.luminosity
            pass
        res[self.year.name][self.magpol.name] = num_lumi / denom_lumi
        return res
    
    def get_final_cuts_eff(self):
        res = {}
        for year_item in self.year.list_years:
            res[year_item.name] = {}
            for magpol_item in self.magpol.list_magpol:
                try:
                    path = pathname_local+'python/Includes/efficiency/'+self.channel.name+"/"+self.source.name+"/"+year_item.name+"/"+magpol_item.name+'/final_cuts_info.json'
                    with open(path) as f:
                        print(" ================= GET FINAL CUTS EFFICIENCY INFO AT")
                        print(path)
                        res[year_item.name][magpol_item.name] = json.load(f)
                except FileNotFoundError:
                        print("Final cuts efficiency not computed for this ntuple")
                        res[year_item.name][magpol_item.name] = None
        return res

    def get_merged_final_cuts_eff(self):
        ### this should be ran only when we have
        # ran the final selections for all samples
        res = self.final_cuts_eff
        num_lumi   = 0
        denom_lumi = 0
        for year_item in self.year.list_years:
            try:
                ### necessary since some MC don't have samples for
                # certain years
                test = res[year_item.name]
            except KeyError:
                continue
            num_magpol   = 0
            denom_magpol = 0
            for magpol_item in self.magpol.list_magpol:
                ### weighted average on magpol
                num_magpol += res[year_item.name][magpol_item.name]["input_events"] * res[year_item.name][magpol_item.name]["efficiency"]
                denom_magpol += res[year_item.name][magpol_item.name]["input_events"]
                pass
            num_lumi   += year_item.luminosity * num_magpol / denom_magpol
            denom_lumi += year_item.luminosity
            pass
        res[self.year.name][self.magpol.name] = num_lumi / denom_lumi
        return res

    
    def get_truth_matching_cuts(self):
        if (self.source.isMC == False):
            return "(Bu_M > 0)"
        print("MAP_TRUTH_MATCHING[self.source.name]", MAP_TRUTH_MATCHING[self.source.name])
        return MAP_TRUTH_MATCHING[self.source.name]


    def define_mass_pdfs(self):
        self.mass_pdfs = {}
        for comp in self.components:
            self.mass_pdfs[comp[0]] = MassPDF(comp[1])
            pass
        return

    # @tf.function
    def get_mass_pdf_functions(self,variables_to_fit):
        self.mass_pdf_functions = {}
        for comp_name in self.mass_pdfs.keys():
            self.mass_pdf_functions[comp_name] = self.mass_pdfs[comp_name].get_pdf(variables_to_fit[comp_name])
            pass
        return

    # def get_all_fit_variables(self,variables_to_fit):
    #     all_fit_variables = variables_to_fit
    #     self.vardict = VARDICT[self.source.name][self.channel.name] # [self.year.name][self.magpol.name]
    #     for comp in self.components:
    #         for var in VARIABLES_COMPONENTS[comp[0]]:
    #             if (var not in variables_to_fit[comp[0]].keys()):
    #                 all_fit_variables[comp[0]][var] = [comp[0]][var]
    #                 pass
    #             pass
    #         pass
    #     return all_fit_variables

    def store_events(self, paths, list_var, cuts, aliases = None):
        self.uproot_data = DataFrame.from_dict(
            uproot.concatenate(paths,
                               list_var,
                               cuts,
                               aliases = aliases,
                               library='np'))

    # @tf.function
    def total_mass_pdf(self,Bu_M):
        total_mass_pdf_values = np.zeros(np.shape(Bu_M))
        for comp_name in self.mass_pdfs.keys():
            total_mass_pdf_values += self.mass_pdf_functions[comp_name](Bu_M)
            pass
        return total_mass_pdf_values
        
    # @tf.function
    def get_nll(self,variables):
        if (self.uproot_data == None):
            print("ERROR -------------- in get_nll for ntuple")
            print(self)
            print("  -- For this to work you need to first store the data in ntuple.uproot_data")
            print("        by running ntuple.store_events()")
            print(" EXIT ")
            print("  ")
            exit()
        #### variables_to_fit has to be organised following:
        # variables_to_fit[components] = dict(variables, value)
        # all the variables present in this list will
        # be fitted, and all others will be fixed from the VARDICT dictionary
        # all_fit_variables = self.get_all_fit_variables()
        #### constraint on the number of events
        self.get_mass_pdf_functions(variables)
        sum_yields = sum([variables[comp[0]]["yield"] for comp in self.components])
        total_yield = len(self.uproot_data[self.variable_to_fit])
        log_poisson_constraint = poisson.logpmf(total_yield, sum_yields)
        ## pdf values
        total_pdf_value = self.total_mass_pdf(self.uproot_data[self.variable_to_fit],variables)
        int_pdf_value = norm_pdf(self.uproot_data[self.variable_to_fit], self.total_mass_pdf)
        nll = tf.reduce_sum(-2 * clip_log(total_pdf_value / int_pdf_value)) - 2*log_poisson_constraint
        return nll

    def pdf_values_draw(self, np_input, variables):
        pdf_values = {}
        self.get_mass_pdf_functions(variables)
        for comp_name in self.mass_pdfs.keys():
            pdf_values[comp_name] = self.mass_pdf_functions[comp_name](np_input)
        pdf_values["total_mass_pdf"] = self.total_mass_pdf(np_input)
        return pdf_values


        
        

        
class Variables:
    def __init__(self, name, tex, scale, range_value):
        self.name  = name
        self.scale = scale
        self.tex   = tex
        self.range_value = range_value

DICT_VARIABLES_TEX = {
    'Bu_constD0KSPV_M':          Variables('Bu_constD0KSPV_M'      , '$m(B^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const', 'linear',  [4500,7000]),
    'Bu_constD0PV_M':            Variables('Bu_constD0PV_M'        , '$m(B^\pm)$ [MeV/$c^2$] DTF D0-PV const'  , 'linear',   [4500,7000]),
    'Bu_constKSPV_M':            Variables('Bu_constKSPV_M'        , '$m(B^\pm)$ [MeV/$c^2$] DTF KS-PV const'  , 'linear',   [4500,7000]),
    'DK_M':          Variables('DK_M'      , '$m(DK^\pm)$ [MeV/$c^2$]', 'linear', [4500,7000]),
    'DK_constD0KSPV_M':          Variables('DK_constD0KSPV_M'      , '$m(DK^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const', 'linear', [4500,7000]),
    'DK_constD0PV_M':            Variables('DK_constD0PV_M'        , '$m(DK^\pm)$ [MeV/$c^2$] DTF D0-PV const'  , 'linear', [4500,7000]),
    'DK_constKSPV_M':            Variables('DK_constKSPV_M'        , '$m(DK^\pm)$ [MeV/$c^2$] DTF KS-PV const'  , 'linear', [4500,7000]),
    'Dpi_constD0KSPV_M':          Variables('Dpi_constD0KSPV_M'      , '$m(D\pi^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const', 'linear', [4500,7000]),
    'Dpi_constD0PV_M':            Variables('Dpi_constD0PV_M'        , '$m(D\pi^\pm)$ [MeV/$c^2$] DTF D0-PV const'  , 'linear', [4500,7000]),
    'Dpi_constKSPV_M':            Variables('Dpi_constKSPV_M'        , '$m(D\pi^\pm)$ [MeV/$c^2$] DTF KS-PV const'  , 'linear', [4500,7000]),
    'Bu_constD0KSPV_status':     Variables('Bu_constD0KSPV_status' , 'Status DTF D0KSPV', 'linear', [0,1]),
    'Bu_constD0PV_status':       Variables('Bu_constD0PV_status'   , 'Status DTF D0PV'  , 'linear', [0,1]),
    'Bu_constKSPV_status':       Variables('Bu_constKSPV_status'   , 'Status DTF KSPV'  , 'linear', [0,1]),
    'Bu_M':                      Variables('Bu_M'   , '$m(B)$ [MeV/$c^2$]', 'linear', [4500,7000]),
    "m_Kspip_True" : Variables("m_Kspip_True" ,"True $m(K_S\pi^+)$ [GeV$^2$]"  , 'linear', [0,3]),
    "m_Kspim_True" : Variables("m_Kspim_True" ,"True $m(K_S\pi^-)$ [GeV$^2$]"  , 'linear', [0,3]),
    "m_pippim_True": Variables("m_pippim_True","True $m(\pi^+\pi^-)$ [GeV$^2$]", 'linear', [0,3]),
    "m_Kspip" : Variables("m_Kspip" ,"$m(K_S\pi^+)$ [GeV$^2$]"  , 'linear', [0,3]),
    "m_Kspim" : Variables("m_Kspim" ,"$m(K_S\pi^-)$ [GeV$^2$]"  , 'linear', [0,3]),
    "m_pippim": Variables("m_pippim","$m(\pi^+\pi^-)$ [GeV$^2$]", 'linear', [0,3]),
    "zp_p" :Variables("zp_p"  ,r"$z_{+}^{\prime}$", 'linear', [-1,1]),
    "zm_pp":Variables("zm_pp" ,r"$z_{-}^{\prime\prime}$", 'linear', [-1,1]),
    "min_Ksh1h2_IPCHI2_OWNPV": Variables("min_Ksh1h2_IPCHI2_OWNPV",r"min(IPCHI2_OWNPV Ks(h1/h2) )", 'log', [0,4000]),
    "max_Ksh1h2_IPCHI2_OWNPV": Variables("max_Ksh1h2_IPCHI2_OWNPV",r"max(IPCHI2_OWNPV Ks(h1/h2) )", 'log', [0,5000] ),
    "min_h1h2_IPCHI2_OWNPV"  : Variables("min_h1h2_IPCHI2_OWNPV"  ,r"min(IPCHI2_OWNPV h1/h2)", 'log', [0,50000] ),
    "max_h1h2_IPCHI2_OWNPV"  : Variables("max_h1h2_IPCHI2_OWNPV"  ,r"max(IPCHI2_OWNPV h1/h2)", 'log', [0,180000]),
    "BD_ZSIG"                : Variables("BD_ZSIG"                ,r"$B/D$ $z$ significance" , 'log', [-50,200]),
    "Bu_constKSPV_D0_M"      : Variables("Bu_constKSPV_D0_M"      ,r"$m(D^{0})$ with $K_S/PV$ constraint" , 'linear', [1700,2000]),
    "Bu_P"             : Variables("Bu_P"              ,r"$B$ momentum [MeV/$c^2$]" , 'linear', [0,1000000])    ,
    "Bu_PT"            : Variables("Bu_PT"             ,r"$B$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,60000])     ,
    "Bu_TAU"           : Variables("Bu_TAU"            ,r"$B$ lifetime [ps]" , 'linear', [0,0.07])      ,
    "Bu_FD_OWNPV"      : Variables("Bu_FD_OWNPV"       ,r"$B$ Flight distance [mm]" , 'log', [0,400])           ,
    "D0_P"             : Variables("D0_P"              ,r"$D^0$ momentum [MeV/$c^2$]" , 'linear', [0,800000])    ,
    "D0_PT"            : Variables("D0_PT"             ,r"$D^0$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,40000])     ,
    "Ks_P"             : Variables("Ks_P"              ,r"$K_S$ momentum [MeV/$c^2$]" , 'linear', [0,300000])    ,
    "Ks_PT"            : Variables("Ks_PT"             ,r"$K_S$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,30000])     ,
    "h1_P"             : Variables("h1_P"              ,r"$\pi^{(1)}|_D$ momentum [MeV/$c^2$]" , 'linear', [0,500000])    ,
    "h1_PT"            : Variables("h1_PT"             ,r"$\pi^{(1)}|_D$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,17500] )     ,
    "h2_P"             : Variables("h2_P"              ,r"$\pi^{(2)}|_D$ momentum [MeV/$c^2$]" , 'linear', [0,500000])    ,
    "h2_PT"            : Variables("h2_PT"             ,r"$\pi^{(2)}|_D$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,17500] )     ,
    "Ksh1_P"           : Variables("Ksh1_P"            ,r"$\pi^{(1)}|_K$ momentum [MeV/$c^2$]" , 'linear', [0,250000])      ,
    "Ksh1_PT"          : Variables("Ksh1_PT"           ,r"$\pi^{(1)}|_K$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,20000])       ,
    "Ksh2_P"           : Variables("Ksh2_P"            ,r"$\pi^{(2)}|_K$ momentum [MeV/$c^2$]" , 'linear', [0,250000])      ,
    "Ksh2_PT"          : Variables("Ksh2_PT"           ,r"$\pi^{(2)}|_K$ $p_T$ [MeV/$c^2$]"    , 'linear', [0,20000])       ,
    "Bach_P"           : Variables("Bach_P"            ,r"Bachelor momentum [MeV/$c^2$]" , 'linear', [0,1200000])      ,
    "Bach_PT"          : Variables("Bach_PT"           ,r"Bachelor $p_T$ [MeV/$c^2$]"    , 'linear', [0,40000])       ,
    "log_min_h1h2_IPCHI2_OWNPV"  :    Variables("log_min_h1h2_IPCHI2_OWNPV"   , "log_min_h1h2_IPCHI2_OWNPV"  , 'linear', None),
    "log_max_h1h2_IPCHI2_OWNPV"  :    Variables("log_max_h1h2_IPCHI2_OWNPV"   , "log_max_h1h2_IPCHI2_OWNPV"  , 'linear', None),
    "log_Bach_IPCHI2_OWNPV"      :    Variables("log_Bach_IPCHI2_OWNPV"       , "log_Bach_IPCHI2_OWNPV"      , 'linear', None),
    "log_min_Ksh1h2_IPCHI2_OWNPV":    Variables("log_min_Ksh1h2_IPCHI2_OWNPV" , "log_min_Ksh1h2_IPCHI2_OWNPV", 'linear', None),
    "log_max_Ksh1h2_IPCHI2_OWNPV":    Variables("log_max_Ksh1h2_IPCHI2_OWNPV" , "log_max_Ksh1h2_IPCHI2_OWNPV", 'linear', None),
    "log_D0_IPCHI2_OWNPV"        :    Variables("log_D0_IPCHI2_OWNPV"         , "log_D0_IPCHI2_OWNPV"        , 'linear', None),
    "log_Bu_IPCHI2_OWNPV"        :    Variables("log_Bu_IPCHI2_OWNPV"         , "log_Bu_IPCHI2_OWNPV"        , 'linear', None),
    "log_Bu_FDCHI2_OWNPV"        :    Variables("log_Bu_FDCHI2_OWNPV"         , "log_Bu_FDCHI2_OWNPV"        , 'linear', None),
    "log_Bu_P"                   :    Variables("log_Bu_P"                    , "log_Bu_P"                   , 'linear', None),
    "log_Bu_PT"                  :    Variables("log_Bu_PT"                   , "log_Bu_PT"                  , 'linear', None),
    "log_D0_P"                   :    Variables("log_D0_P"                    , "log_D0_P"                   , 'linear', None),
    "log_D0_PT"                  :    Variables("log_D0_PT"                   , "log_D0_PT"                  , 'linear', None),
    "log_Bach_PT"                :    Variables("log_Bach_PT"                 , "log_Bach_PT"                , 'linear', None),
    "log_Bach_P"                 :    Variables("log_Bach_P"                  , "log_Bach_P"                 , 'linear', None),
    "log_Bu_RHO_BPV"             :    Variables("log_Bu_RHO_BPV"              , "log_Bu_RHO_BPV"             , 'linear', None),
    "log_D0_RHO_BPV"             :    Variables("log_D0_RHO_BPV"              , "log_D0_RHO_BPV"             , 'linear', None),
    "Bu_MAXDOCA"                 :    Variables("Bu_MAXDOCA"                  , "Bu_MAXDOCA"                 , 'linear', None),
    "D0_MAXDOCA"                 :    Variables("D0_MAXDOCA"                  , "D0_MAXDOCA"                 , 'linear', None),
    "Bu_PTASY_1_5"               :    Variables("Bu_PTASY_1_5"                , "Bu_PTASY_1_5"               , 'linear', None),
    "log_D0_VTXCHI2DOF"          :    Variables("log_D0_VTXCHI2DOF"           , "log_D0_VTXCHI2DOF"          , 'linear', None),
    "log_Ks_VTXCHI2DOF"          :    Variables("log_Ks_VTXCHI2DOF"           , "log_Ks_VTXCHI2DOF"          , 'linear', None),
    "log_Bu_VTXCHI2DOF"          :    Variables("log_Bu_VTXCHI2DOF"           , "log_Bu_VTXCHI2DOF"          , 'linear', None),
    "log10_1_minus_Bu_DIRA_BPV"  :    Variables("log10_1_minus_Bu_DIRA_BPV"   , "log10_1_minus_Bu_DIRA_BPV"  , 'linear', None),
    "log10_1_minus_D0_DIRA_BPV"  :    Variables("log10_1_minus_D0_DIRA_BPV"   , "log10_1_minus_D0_DIRA_BPV"  , 'linear', None),
    "log10_1_minus_Ks_DIRA_BPV"  :    Variables("log10_1_minus_Ks_DIRA_BPV"   , "log10_1_minus_Ks_DIRA_BPV"  , 'linear', None),
    "log_Bu_constD0KSPV_CHI2NDOF":    Variables("log_Bu_constD0KSPV_CHI2NDOF" , "log_Bu_constD0KSPV_CHI2NDOF", 'linear', None),    
    'Bu_constD0KSPV_swapBachToPi_M':          Variables('Bu_constD0KSPV_swapBachToPi_M'      , r'$m(B^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow \pi$ hyp.)', 'linear',  [5050,5800]),
    'DK_constD0KSPV_swapBachToPi_M':          Variables('DK_constD0KSPV_swapBachToPi_M'      , r'$m(DK^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow \pi$ hyp.)', 'linear', [5050,5800]),
    'Dpi_constD0KSPV_swapBachToPi_M':          Variables('Dpi_constD0KSPV_swapBachToPi_M'      , r'$m(D\pi^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow \pi$ hyp.)', 'linear', [5050,5800]),
    'Bu_constD0KSPV_swapBachToPi_status':     Variables('Bu_constD0KSPV_swapBachToPi_status' , r'Status DTF D0KSPV ($K \rightarrow \pi$ hyp.)', 'linear', [0,1]),
    'Bu_constD0KSPV_swapBachToK_M':          Variables('Bu_constD0KSPV_swapBachToK_M'      , r'$m(B^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow K$ hyp.)', 'linear',  [5050,5800]),
    'DK_constD0KSPV_swapBachToK_M':          Variables('DK_constD0KSPV_swapBachToK_M'      , r'$m(DK^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow K$ hyp.)', 'linear', [5050,5800]),
    'Dpi_constD0KSPV_swapBachToK_M':          Variables('Dpi_constD0KSPV_swapBachToK_M'      , r'$m(D\pi^\pm)$ [MeV/$c^2$] DTF D0-KS-PV const ($K \rightarrow K$ hyp.)', 'linear', [5050,5800]),
    'Bu_constD0KSPV_swapBachToK_status':     Variables('Bu_constD0KSPV_swapBachToK_status' , r'Status DTF D0KSPV ($K \rightarrow K$ hyp.)', 'linear', [0,1]),
    'Ks_FDCHI2_ORIVX'            :    Variables("Ks_FDCHI2_ORIVX"             , r"$K_S$ $\chi^{2}_{FD}$"     , 'linear', None) ,
    'h1_hasRich'                 :    Variables("h1_hasRich"                  , r"$h^1_D$ has RICH signal"   , 'linear', [0,1]),
    'h2_hasRich'                 :    Variables("h2_hasRich"                  , r"$h^2_D$ has RICH signal"   , 'linear', [0,1]),
    'h1_PIDK'                    :    Variables("h1_PIDK"                     , r"$h^1_D$ PID($K$)"          , 'linear', None) , 
    'h2_PIDK'                    :    Variables("h2_PIDK"                     , r"$h^2_D$ PID($K$)"          , 'linear', None) ,
}
